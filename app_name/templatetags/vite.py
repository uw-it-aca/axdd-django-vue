# PROJECT_ROOT/templatetags/vite.py

from email.mime import application
from os import path
import re
import json
from django import template
from django.conf import settings
from django.utils.safestring import mark_safe
from django.templatetags.static import static

register = template.Library()

# DEV = settings.DEBUG
DEV = False
DEV_SERVER_ROOT = "app_name"


def vite_manifest(entries_names):

    # this is essentiol for a working bundler
    application_name = 'app_name'
    manifest_filepath = path.join(application_name, 'static/manifest.json')

    # MARK: DEV not used
    if DEV:
        scripts = [
            f"{DEV_SERVER_ROOT}/static/app_name/",
        ]

        for name in entries_names:
            scripts.append(f'{DEV_SERVER_ROOT}/{name}')

        styles = []
        return scripts, styles
    else:
        with open(manifest_filepath) as fp:
            manifest = json.load(fp)
        _processed = set()

        def _process_entries(names):
            scripts = []
            styles = []

            for name in names:
                if name in _processed:
                    continue

                chunk = manifest[name]

                import_scripts, import_styles = _process_entries(chunk.get('imports', []))
                scripts += import_scripts
                styles += import_styles

                scripts += [chunk['file']]
                styles += [css for css in chunk.get('css', [])]

                _processed.add(name)

            return scripts, styles

        return _process_entries(entries_names)


@register.simple_tag(name="vite_styles")
def vite_styles(*entries_names):
    """
    Populate an html template with styles generated by vite

    Usage::

        {% vite_styles 'main.js' 'other-entry.js' %}

    Examples::
        <head>
            ...
            {% vite_styles 'main.js' 'other-entry.js' %}
        </head>
    """
    _, styles = vite_manifest(entries_names)
    styles = map(lambda href: static(href), styles)
    as_link_tag = lambda href: f'<link rel="stylesheet" href="{href}" />'
    return mark_safe("\n".join(map(as_link_tag, styles)))


@register.simple_tag(name="vite_scripts")
def vite_scripts(*entries_names):
    """
    Populate an html template with script tags generated by vite

    Usage::

        {% vite_scripts 'main.js' 'other-entry.js' %}

    Examples::
        <body>
            <!-- Your HTML -->
            {% vite_scripts 'main.js' 'other-entry.js' %}
        </body>
    """
    scripts, _ = vite_manifest(entries_names)
    scripts = map(lambda src: static(src), scripts)
    as_script_tag = lambda src: f'<script type="module" src="{src}"></script>'
    return mark_safe("\n".join(map(as_script_tag, scripts)))
